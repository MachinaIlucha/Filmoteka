{"mappings":"iiBAAAA,EAAA,SCAA,IAAAC,EAAAD,EAAA,S,oGAaeE,EAAoBC,EAAoBC,G,OAAxCC,EAAmBC,MAAAC,KAAAC,U,UAAnBH,I,OAAAA,EAAfI,EAAAR,EAAA,CAAAQ,EAAAC,GAAAC,MAAA,SAAAC,EAAmCT,EAAoBC,G,IAE7CS,EAEAC,EAIAC,E,2FANgBZ,I,cAAhBU,EAAOG,EAAAC,K,SAEOC,QAAQC,IAC1BN,EAAQO,KAAI,SAAAC,G,OAAM,EAAAC,EAAAC,eAAcF,GAAIG,MAAK,SAAAC,G,OAAQA,EAAKC,I,eADlDZ,EAAKE,EAAAC,KAILF,EAAoBD,EAAMM,KAAI,SAAAO,GAClC,IAAMC,EAAYD,EAAKE,OAAOT,KAAI,SAAAU,G,OAASA,EAAMT,E,IACjD,OAAOZ,EAAAsB,EAAA,IAAKJ,EAAI,CAAEC,a,IAGpBI,EAAAC,IAAIC,YAAYC,UAAUC,IAAI,cAC9B,EAAAC,EAAAC,mBAAkBN,EAAAC,IAAKlB,G,kDAEvBwB,QAAQC,MAAM,8BAAmCC,OAALrC,EAAK,WAAUY,EAAA0B,GAAMC,SACjEC,EAAAC,OAAOC,QAAQ,8BAAmCL,OAALrC,EAAK,Y,2DAjBpBE,MAAAC,KAAAC,U,CAPlCwB,EAAAC,IAAIc,kBAAkBC,iBAAiB,SAAS,W,OAC9C9C,EAAoB+C,EAAAC,kBAAmB,U,IAEzClB,EAAAC,IAAIkB,gBAAgBH,iBAAiB,SAAS,W,OAC5C9C,EAAoB+C,EAAAG,gBAAiB,S","sources":["src/library.js","src/js/render/renderWatchedFilms.js"],"sourcesContent":["import './js/myLibrary/localStorage';\nimport './js/render/renderWatchedFilms';\n// import './js/pagination/pagination';\nimport './js/modal';\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { getWatchedFilmIds, getQueueFilmIds } from '../myLibrary/localStorage';\nimport { insertMovieMarkup } from './renderSearchFilms';\nimport { fetchFilmById } from '../api/movieAPI';\nimport { ref } from '../references';\n\nref.btnLibraryWatched.addEventListener('click', () =>\n  fetchAndRenderFilms(getWatchedFilmIds, 'watched')\n);\nref.btnLibraryQueue.addEventListener('click', () =>\n  fetchAndRenderFilms(getQueueFilmIds, 'queued')\n);\n\nasync function fetchAndRenderFilms(getFilmIdsFunction, type) {\n  try {\n    const filmIds = await getFilmIdsFunction();\n\n    const films = await Promise.all(\n      filmIds.map(id => fetchFilmById(id).then(item => item.data))\n    );\n\n    const filmsWithGenreIds = films.map(film => {\n      const genre_ids = film.genres.map(genre => genre.id);\n      return { ...film, genre_ids };\n    });\n\n    ref.notImgStile.classList.add('is-hidden');\n    insertMovieMarkup(ref, filmsWithGenreIds);\n  } catch (error) {\n    console.error(`Failed to fetch and render ${type} films:`, error.message);\n    Notify.failure(`Failed to fetch and render ${type} films.`);\n  }\n}\n"],"names":["parcelRequire","$bpxeT","$9f9e4a01ab50e4a8$var$fetchAndRenderFilms","getFilmIdsFunction","type","$9f9e4a01ab50e4a8$var$_fetchAndRenderFilms","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","filmIds","films","filmsWithGenreIds","_ctx","sent","Promise","all","map","id","$8NbBk","fetchFilmById","then","item","data","film","genre_ids","genres","genre","$dDDEV","$go8W7","ref","notImgStile","classList","add","$eOhzM","insertMovieMarkup","console","error","concat","t0","message","$h6c0i","Notify","failure","btnLibraryWatched","addEventListener","$1Xhij","getWatchedFilmIds","btnLibraryQueue","getQueueFilmIds"],"version":3,"file":"my-library.6397488e.js.map"}
{"mappings":"oeAAAA,EAAA,SCAA,IAAAC,EAAAD,EAAA,S,oDAmBAE,eAAeC,EAAoBC,EAAoBC,GACrD,IACE,MAAMC,QAAgBF,IAEtB,GAAuB,IAAnBE,EAAQC,OAKV,OAJAC,EAAAC,IAAIC,YAAYC,UAAUC,OAAO,aAyBrCJ,EAAAC,IAAII,mBAAmBC,UAAY,QAtB/Bb,EAAAc,OAAOC,KAAK,oCAId,MAIMC,SAJcC,QAAQC,IAC1Bb,EAAQc,KAAIC,IAAM,EAAAC,EAAAC,eAAcF,GAAIG,MAAKC,GAAQA,EAAKC,WAGxBN,KAAIO,IAClC,MAAMC,EAAYD,EAAKE,OAAOT,KAAIU,GAASA,EAAMT,KACjD,MAAO,IAAKM,E,UAAMC,EAAW,IAG/BpB,EAAAC,IAAIC,YAAYC,UAAUoB,IAAI,cAC9B,EAAAC,EAAAC,mBAAkBzB,EAAAC,IAAKQ,E,CACvB,MAAOiB,GACPC,QAAQD,MAAM,8BAA8B7B,WAAe6B,EAAME,SACjEnC,EAAAc,OAAOsB,QAAQ,8BAA8BhC,W,EAtCjDF,EAAoBmC,EAAAC,kBAAmB,WAEvC/B,EAAAC,IAAI+B,kBAAkBC,iBAAiB,SAAS,KAC9CjC,EAAAC,IAAI+B,kBAAkB7B,UAAUoB,IAAI,8BACpCvB,EAAAC,IAAIiC,gBAAgB/B,UAAUC,OAAO,8BACrCT,EAAoBmC,EAAAC,kBAAmB,UAAU,IAEnD/B,EAAAC,IAAIiC,gBAAgBD,iBAAiB,SAAS,KAC5CjC,EAAAC,IAAIiC,gBAAgB/B,UAAUoB,IAAI,8BAClCvB,EAAAC,IAAI+B,kBAAkB7B,UAAUC,OAAO,8BACvCT,EAAoBmC,EAAAK,gBAAiB,SAAS,I","sources":["src/library.js","src/js/render/renderWatchedFilms.js"],"sourcesContent":["import './js/myLibrary/localStorage';\nimport './js/render/renderWatchedFilms';\n// import './js/pagination/pagination';\nimport './js/modal';\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { getWatchedFilmIds, getQueueFilmIds } from '../myLibrary/localStorage';\nimport { insertMovieMarkup } from './renderSearchFilms';\nimport { fetchFilmById } from '../api/movieAPI';\nimport { ref } from '../references';\n\nfetchAndRenderFilms(getWatchedFilmIds, 'watched');\n\nref.btnLibraryWatched.addEventListener('click', () => {\n  ref.btnLibraryWatched.classList.add('header-library__btn-active');\n  ref.btnLibraryQueue.classList.remove('header-library__btn-active');\n  fetchAndRenderFilms(getWatchedFilmIds, 'watched');\n});\nref.btnLibraryQueue.addEventListener('click', () => {\n  ref.btnLibraryQueue.classList.add('header-library__btn-active');\n  ref.btnLibraryWatched.classList.remove('header-library__btn-active');\n  fetchAndRenderFilms(getQueueFilmIds, 'queued');\n});\n\nasync function fetchAndRenderFilms(getFilmIdsFunction, type) {\n  try {\n    const filmIds = await getFilmIdsFunction();\n\n    if (filmIds.length === 0) {\n      ref.notImgStile.classList.remove('is-hidden');\n\n      clearGallery();\n      Notify.info('No films found in this category.');\n      return;\n    }\n\n    const films = await Promise.all(\n      filmIds.map(id => fetchFilmById(id).then(item => item.data))\n    );\n\n    const filmsWithGenreIds = films.map(film => {\n      const genre_ids = film.genres.map(genre => genre.id);\n      return { ...film, genre_ids };\n    });\n\n    ref.notImgStile.classList.add('is-hidden');\n    insertMovieMarkup(ref, filmsWithGenreIds);\n  } catch (error) {\n    console.error(`Failed to fetch and render ${type} films:`, error.message);\n    Notify.failure(`Failed to fetch and render ${type} films.`);\n  }\n}\n\nfunction clearGallery() {\n  ref.libraryGalleryList.innerHTML = '';\n}\n"],"names":["parcelRequire","$iQIUW","async","$87e5825ff5418fb0$var$fetchAndRenderFilms","getFilmIdsFunction","type","filmIds","length","$1sEOH","ref","notImgStile","classList","remove","libraryGalleryList","innerHTML","Notify","info","filmsWithGenreIds","Promise","all","map","id","$k8mky","fetchFilmById","then","item","data","film","genre_ids","genres","genre","add","$ccLkp","insertMovieMarkup","error","console","message","failure","$86fEG","getWatchedFilmIds","btnLibraryWatched","addEventListener","btnLibraryQueue","getQueueFilmIds"],"version":3,"file":"my-library.f56c912d.js.map"}